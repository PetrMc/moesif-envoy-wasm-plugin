glooctl install gateway enterprise --license-key=$GLOO_GATEWAY_LICENSE_KEY --values - <<EOF
observability:
  enabled: false
prometheus:
  enabled: false
grafana:
  defaultInstallationEnabled: false  
EOF


helm install -n gloo-system gloo-gateway gloo/gloo \
--create-namespace \
--version 1.17.3 \
--set kubeGateway.enabled=true \
--set gloo.disableLeaderElection=true \
--set gatewayProxies.gatewayProxy.disabled=true \
--set-string license_key=$GLOO_LICENSE_KEY

helm upgrade --install gloo glooe/gloo-ee --namespace gloo-system \
  --create-namespace --version 1.17.0 --set-string license_key=$GLOO_LICENSE_KEY

helm uninstall gloo --namespace gloo-system

kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.0.0/standard-install.yaml

helm install -n gloo-system gloo-gateway glooe/gloo-ee \
--create-namespace \
--version 1.17.0 \
--set-string license_key=$GLOO_LICENSE_KEY \
--set gloo.kubeGateway.enabled=true \
--set gloo.gloo.disableLeaderElection=true \
--set gloo.discovery.enabled=false \
--set observability.enabled=false \
--set prometheus.enabled=false \
--set grafana.defaultInstallationEnabled=false \
--set gloo-fed.enabled=false \
--set gloo-fed.glooFedApiserver.enabled=false \
--set gloo.gatewayProxies.gatewayProxy.disabled=true

kubectl get cm gloo-proxy-http -o json | jq -r '.data["envoy.yaml"]' | yq eval -P -
curl -vik http://$INGRESS_GW_ADDRESS:8080/headers -H "host: moesif.example.com:8080"

kubectl create secret generic --save-config -n gloo-system license --from-literal=license-key=$GLOO_LICENSE_KEY --dry-run=client -o yaml | kubectl apply -f - 
kubectl -n gloo-system rollout restart deploy/gloo

spec:
  extProc:
    allowModeOverride: false
    failureModeAllow: false
    filterStage:
      predicate: After
      stage: AuthZStage
    grpcService:
      extProcServerRef:
        name: ext-proc-grpc
        namespace: gloo-system
    processingMode:
      requestHeaderMode: SEND
      responseHeaderMode: SKIP

 docker build -t moesif-exproc-plugin .
 docker tag moesif-exproc-plugin:latest mcallisterpetr/moesif-exproc-plugin:0.2.43
 docker push mcallisterpetr/moesif-exproc-plugin:0.2.43

RUSTFLAGS='-C target-feature=+crt-static' cargo build --release
docker build -t server-exproc-plugin .
docker tag server-exproc-plugin:latest mcallisterpetr/server-exproc-plugin:0.1.8
docker push mcallisterpetr/server-exproc-plugin:0.1.8

 # Variables to configure
# export AWS_REGION=us-west-1
# export AWS_REGION=ap-northeast-2
export AWS_REGION=ca-central-1
# export AWS_PROFILE=default
export AWS_PROFILE=marketplace
OWNER_NAME=$(whoami)
EKS_VERSION=1.30
export CLUSTER_NAME=gg-extproc-1-${OWNER_NAME}
# export CLUSTER_NAME=schema-test-2-${OWNER_NAME}-EKS${EKS_VERSION//./}
NUMBER_NODES=2
NODE_TYPE="c7i.xlarge" 
# Graviton
# export NODE_TYPE=m6g.large docker build -t simple-rust-app .

eksctl create cluster --region $AWS_REGION \
  --name $CLUSTER_NAME \
  --nodes $NUMBER_NODES \
  --node-type $NODE_TYPE \
  --tags "created-by=$OWNER_NAME" \
  --version=$EKS_VERSION 

 curl -X POST http://127.0.0.1:19000/logging?level=debug
 kubectl logs gloo-proxy-http-d5c8fb94f-8hkzk > /tmp/b.txt

 https://chatgpt.com/c/afaad267-dd6f-4ffa-9ee8-f32cf7229285
 
 grpcurl -plaintext -import-path debug/simple-rust-app/proto \
    -proto envoy/service/ext_proc/v3/external_processor.proto \
    -d '{
          "request_headers": {
            "headers": [
              {
                "headers": {
                  "key": ":authority",
                  "value": "example.com"
                }
              },
              {
                "headers": {
                  "key": ":path",
                  "value": "/test"
                }
              },
              {
                "headers": {
                  "key": ":method",
                  "value": "GET"
                }
              },
              {
                "headers": {
                  "key": ":scheme",
                  "value": "http"
                }
              }
            ],
            "end_of_stream": false
          }
        }' localhost:50051 envoy.service.ext_proc.v3.ExternalProcessor/Process
{
  "requestHeaders": {
    "response": {}
  },
  "dynamicMetadata": {
    "static_key": "static_value"
  },
  "modeOverride": {
    "requestHeaderMode": "SEND",
    "responseHeaderMode": "SEND",
    "requestBodyMode": "BUFFERED",
    "responseBodyMode": "BUFFERED",
    "requestTrailerMode": "SEND",
    "responseTrailerMode": "SEND"
  }
}

 grpcurl -plaintext -import-path debug/simple-rust-app/proto \
    -proto envoy/service/ext_proc/v3/external_processor.proto \
    -d '{
          "request_headers": {
            "headers": [
              {
                "headers": {
                  "key": ":authority",
                  "value": "example.com"
                }
              },
              {
                "headers": {
                  "key": ":path",
                  "value": "/test"
                }
              },
              {
                "headers": {
                  "key": ":method",
                  "value": "GET"
                }
              },
              {
                "headers": {
                  "key": ":scheme",
                  "value": "http"
                }
              }
            ],
            "end_of_stream": false
          }
        }' localhost:18080 envoy.service.ext_proc.v3.ExternalProcessor/Process

kubectl cp debug/simple-rust-app/proto tmp-shell:/tmp/proto


grpcurl -plaintext -import-path /tmp/proto  \
    -proto envoy/service/ext_proc/v3/external_processor.proto \
    -d '{
          "request_headers": {
            "headers": [
              {
                "key": ":authority",
                "value": "example.com"
              },
              {
                "key": ":path",
                "value": "/test"
              }
            ]
          },
          "end_of_stream": true
        }' localhost:50051 envoy.service.ext_proc.v3.ExternalProcessor/Process

grpcurl -v -plaintext -import-path /tmp/proto  \
    -proto envoy/service/ext_proc/v3/external_processor.proto \
    -d '{
          "request_headers": {
            "headers": [
              {
                "headers": {
                  "key": ":authority",
                  "value": "example.com"
                }
              },
              {
                "headers": {
                  "key": ":path",
                  "value": "/test"
                }
              }
            ],
            "end_of_stream": false
          }
        }' moesif-exproc-plugin:4445 envoy.service.ext_proc.v3.ExternalProcessor/Process

grpcurl -v -plaintext -import-path /tmp/proto  \
    -proto envoy/service/ext_proc/v3/external_processor.proto \
    -d '{
          "request_headers": {
            "headers": [
              {
                "headers": {
                  "key": ":authority",
                  "value": "example.com"
                }
              },
              {
                "headers": {
                  "key": ":path",
                  "value": "/test"
                }
              }
            ],
            "end_of_stream": false
          }
        }' ext-proc-grpc:4444 envoy.service.ext_proc.v3.ExternalProcessor/Process

